super(props); // cannot ignore writing it . y do we always have to write super(props)

//NEVER update state variables directly in class components

parent constructor
AboutUs.jsx:32 parent render
UserClass.jsx:6 child constructor
UserClass.jsx:38 child render
UserClass.jsx:20 child component did mount
AboutUs.jsx:25 parent component did mount
UserClass.jsx:38 child render
UserClass.jsx:30 child component did update

Chapter 08 - Let's get Classy
Theory Assignment:
● How do you create Nested Routes react-router-dom cofiguration
● Read abt createHashRouter, createMemoryRouter from React Router docs.
● What is the order of life cycle method calls in Class Based Components
● Why do we use componentDidMount?
● Why do we use componentWillUnmount? Show with example
● (Research) Why do we use super(props) in constructor?
● (Research) Why can't we have the callback function of useEffect async?
Coding Assignment:
● Create a Class Based Component
○ Create 2 class based child components
○ Pass props from Parent to child
○ Create a constructor
○ Create a state variable inside child
○ Use this.setState to update it
○ What if there are multiple state variables?
○ Write a console.log for each lifecycle method
○ Play with the console logs to find out the correct order of their execution
● Create interval inside componentDidMount?
○ Use clearInterval to fix the issue caused by that interval
React Life Cycle Method Diagram -
https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/
Code Link - https://bitbucket.org/namastedev/namaste-react-live/src/master/

why we use super in component // to refre to all props of parent class
why cant we use async inside useEffect //  since useEffect() is an asynchronous, non-blocking function, async callbacks cannot be made directly inside of it. To make sure the asynchronous code executes as intended, we can use a different way that declares a new function inside the "useEffect()" hook.